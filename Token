// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) private _allowances;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _initialSupply * 10 ** uint256(_decimals);
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply); // эмитим как "mint"
    }

    function transfer(address _to, uint256 _value) external returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        require(_to != address(0), "Invalid address");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) external returns (bool success) {
        require(_spender != address(0), "Invalid address");
        _allowances[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {
        require(balanceOf[_from] >= _value, "Insufficient balance");
        require(_to != address(0), "Invalid address");
        require(_value <= _allowances[_from][msg.sender], "Allowance exceeded");
        
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        _allowances[_from][msg.sender] -= _value;
        
        emit Transfer(_from, _to, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return _allowances[_owner][_spender];
    }

    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool) {
        _allowances[msg.sender][_spender] += _addedValue;
        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);
        return true;
    }

    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool) {
        require(_allowances[msg.sender][_spender] >= _subtractedValue, "Decreased allowance below zero");
        _allowances[msg.sender][_spender] -= _subtractedValue;
        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);
        return true;
    }

    function mint(address _to, uint256 _amount) external {
        require(_to != address(0), "Invalid address");
        uint256 amountWithDecimals = _amount * 10 ** uint256(decimals);
        totalSupply += amountWithDecimals;
        balanceOf[_to] += amountWithDecimals;
        emit Transfer(address(0), _to, amountWithDecimals);
    }

    function burn(uint256 _amount) external {
        uint256 amountWithDecimals = _amount * 10 ** uint256(decimals);
        require(balanceOf[msg.sender] >= amountWithDecimals, "Insufficient balance to burn");
        balanceOf[msg.sender] -= amountWithDecimals;
        totalSupply -= amountWithDecimals;
        emit Transfer(msg.sender, address(0), amountWithDecimals);
    }
}
